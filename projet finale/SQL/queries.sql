USE GadgetWorldDB;

-- 1. List all products supplied by 'AlphaElectro' with their current price.
SELECT p.product_id, p.product_name, p.price
FROM Products p
JOIN Suppliers s ON p.supplier_id = s.supplier_id
WHERE s.supplier_name = 'AlphaElectro';

-- 2. Find a customer's complete order history, including order date and status.
SELECT o.order_id, o.order_date, o.status, oi.order_item_id, oi.product_id, oi.quantity, oi.unit_price
FROM Orders o
JOIN Order_Items oi ON o.order_id = oi.order_id
WHERE o.customer_id = 1
ORDER BY o.order_date DESC;

-- 3. List all products in the 'Electronics' category along with their average customer rating.
SELECT p.product_id, p.product_name, p.price, 
COALESCE(AVG(r.rating),0) AS avg_rating
FROM Products p
JOIN Categories c ON p.category_id = c.category_id
LEFT JOIN Reviews r ON p.product_id = r.product_id
WHERE c.category_name = 'Electronics'
GROUP BY p.product_id, p.product_name, p.price
ORDER BY avg_rating DESC;

-- 4. Display all items for a specific order (order_id = 10)
SELECT oi.order_item_id, p.product_name, oi.quantity, oi.unit_price, (oi.quantity*oi.unit_price) AS line_total
FROM Order_Items oi
JOIN Products p ON oi.product_id = p.product_id
WHERE oi.order_id = 10;

-- 5. Find the total stock quantity for a specific product across all warehouses.
SELECT p.product_id, p.product_name, SUM(i.quantity) AS total_stock
FROM Products p
JOIN Inventory i ON p.product_id = i.product_id
WHERE p.product_id = 1
GROUP BY p.product_id, p.product_name;

-- 6. Identify customers who have purchased products from more than 3 different categories.
SELECT c.customer_id, c.customer_name, COUNT(DISTINCT p.category_id) AS category_count
FROM Orders o
JOIN Order_Items oi ON o.order_id = oi.order_id
JOIN Products p ON oi.product_id = p.product_id
JOIN Customers c ON o.customer_id = c.customer_id
GROUP BY c.customer_id, c.customer_name
HAVING COUNT(DISTINCT p.category_id) > 3;

-- 7. Identify products that have an average rating below 2 stars and have been sold at least once.
SELECT p.product_id, p.product_name, AVG(r.rating) AS avg_rating, SUM(oi.quantity) AS total_sold
FROM Products p
LEFT JOIN Reviews r ON p.product_id = r.product_id
LEFT JOIN Order_Items oi ON p.product_id = oi.product_id
GROUP BY p.product_id, p.product_name
HAVING AVG(r.rating) < 2 AND SUM(oi.quantity) > 0;

-- 8. Calculate the total revenue generated by each product category.
SELECT cat.category_id, cat.category_name,
SUM(oi.quantity * oi.unit_price) AS revenue
FROM Categories cat
JOIN Products p ON cat.category_id = p.category_id
JOIN Order_Items oi ON p.product_id = oi.product_id
GROUP BY cat.category_id, cat.category_name
ORDER BY revenue DESC;

-- 9. Find the warehouse that holds the largest number of unique products.
SELECT i.warehouse_id, w.warehouse_location, COUNT(DISTINCT i.product_id) AS unique_products
FROM Inventory i
JOIN Warehouses w ON i.warehouse_id = w.warehouse_id
GROUP BY i.warehouse_id, w.warehouse_location
ORDER BY unique_products DESC
LIMIT 1;

-- 10. List customers who have spent over $500 and left at least one 5-star review.
SELECT c.customer_id, c.customer_name, SUM(oi.quantity * oi.unit_price) AS total_spent
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
JOIN Order_Items oi ON o.order_id = oi.order_id
WHERE c.customer_id IN (
  SELECT customer_id FROM Reviews WHERE rating = 5
)
GROUP BY c.customer_id, c.customer_name
HAVING total_spent > 500;

-- 11. Calculate the monthly revenue for the current year.
SELECT DATE_FORMAT(o.order_date, '%Y-%m') AS month, SUM(oi.quantity * oi.unit_price) AS revenue
FROM Orders o
JOIN Order_Items oi ON o.order_id = oi.order_id
WHERE YEAR(o.order_date) = YEAR(CURDATE())
GROUP BY month
ORDER BY month;

-- 12. Find the top 3 most profitable products (total revenue - total cost, cost = 60% of price)
SELECT p.product_id, p.product_name,
       SUM(oi.quantity * oi.unit_price) AS revenue,
       SUM(oi.quantity * oi.unit_price) - SUM(oi.quantity * (p.price * 0.6)) AS profit_estimate
FROM Products p
JOIN Order_Items oi ON p.product_id = oi.product_id
GROUP BY p.product_id, p.product_name
ORDER BY profit_estimate DESC
LIMIT 3;

-- 13. Find the customer who has placed the most orders.
SELECT c.customer_id, c.customer_name, COUNT(o.order_id) AS orders_count
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.customer_name
ORDER BY orders_count DESC
LIMIT 1;

-- 14. For each supplier, list the number of products they supply and the average rating of those products.
SELECT s.supplier_id, s.supplier_name, COUNT(p.product_id) AS product_count, COALESCE(AVG(r.rating),0) AS avg_rating
FROM Suppliers s
LEFT JOIN Products p ON s.supplier_id = p.supplier_id
LEFT JOIN Reviews r ON p.product_id = r.product_id
GROUP BY s.supplier_id, s.supplier_name
ORDER BY product_count DESC;

-- 15. Report of 'Pending' orders older than 3 days with customer contact
SELECT o.order_id, o.order_date, o.status, c.customer_name, c.email, c.shipping_address
FROM Orders o
JOIN Customers c ON o.customer_id = c.customer_id
WHERE o.status = 'Pending' AND o.order_date < NOW() - INTERVAL 3 DAY;

